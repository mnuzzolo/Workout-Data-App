//
//  ExerciseSetSummary.swift
//  Future
//

import Foundation

/// This is the summary of an individual set generated by the user as they workout
public struct ExerciseSetSummary: Codable, Equatable, Hashable, Identifiable {
    public var id: String?
    public var exerciseSetID: String
    public var workoutSummaryID: String?
    public var startedAt: Date?
    public var completedAt: Date?
    public var timeSpentActive: Int?
    public var weight: Float?
    public var repsReported: Int?
    public var exerciseSet: ExerciseSet?
    
    public enum CodingKeys: String, CodingKey {
        case id = "id"
        case exerciseSetID = "set_id"
        case workoutSummaryID = "summary_id"
        case startedAt = "started_at"
        case completedAt = "completed_at"
        case timeSpentActive = "time_spent_active"
        case weight = "weight"
        case repsReported = "reps_reported"
        case exerciseSet = "set"
    }
    
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        self.exerciseSetID = try container.decode(String.self, forKey: .exerciseSetID)
        self.id = try container.decodeIfPresent(String.self, forKey: .id)
        self.workoutSummaryID = try container.decodeIfPresent(String.self, forKey: .workoutSummaryID)
        self.startedAt = try container.decodeIfPresent(String.self, forKey: .startedAt)?.asDate()
        self.completedAt = try container.decodeIfPresent(String.self, forKey: .completedAt)?.asDate()
        self.timeSpentActive = try container.decodeIfPresent(Int.self, forKey: .timeSpentActive)
        self.weight = try container.decodeIfPresent(Float.self, forKey: .weight)
        self.repsReported = try container.decodeIfPresent(Int.self, forKey: .repsReported)
        self.exerciseSet = try container.decodeIfPresent(ExerciseSet.self, forKey: .exerciseSet)
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(self.exerciseSetID, forKey: .exerciseSetID)
        try container.encodeIfPresent(self.id, forKey: .id)
        try container.encodeIfPresent(self.workoutSummaryID, forKey: .workoutSummaryID)
        try container.encodeIfPresent(self.startedAt?.asString(), forKey: .startedAt)
        try container.encodeIfPresent(self.completedAt?.asString(), forKey: .completedAt)
        try container.encodeIfPresent(self.timeSpentActive, forKey: .timeSpentActive)
        try container.encodeIfPresent(self.weight, forKey: .weight)
        try container.encodeIfPresent(self.repsReported, forKey: .repsReported)
        try container.encodeIfPresent(self.exerciseSet, forKey: .exerciseSet)
    }
}

extension ExerciseSetSummary {
    public var weightUsed: Float? {
        return weight ?? exerciseSet?.weight
    }
    
    public var repsCompleted: Int? {
        return repsReported ?? exerciseSet?.reps
    }
    
    public var name: String {
        return exerciseSet?.exercise?.name ?? "Unknown Exercise"
    }
}

extension ExerciseSetSummary: Comparable {
    public static func < (lhs: ExerciseSetSummary, rhs: ExerciseSetSummary) -> Bool {
        if let lExercise = lhs.exerciseSet?.exercise, let rExercise = rhs.exerciseSet?.exercise {
            if lExercise.name == rExercise.name {
                return lExercise.sideDisplayName ?? "" > rExercise.sideDisplayName ?? ""
            }
            return lExercise.name ?? "" > rExercise.name ?? ""
        } else {
            return false
        }
    }
}
